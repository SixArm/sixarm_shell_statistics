#!/bin/sh
set -euf

##
# Given a list of numbers, calculate many statistics.
#
# Example:
#
#     $ echo "1\n2\n4" | n-row-all
#     n: 3 min: 1 max: 4 sum: 7 range: 3 median: 2 mean: 2.33333 sumsq: sd: 1.24722 cv: 0.534523
#
# Author: Joel Parker Henderson (joel@joelparkerhenderson.com)
# License: GPL
# Updated: 2015-09-25
# Version: 1.0.1
##

awk '

function sort(){
  if (_sort == "") {
    asort(a)
    _sort = 1
  }
}

function n(){
  if (_n == ""){
    _n = NR
  }
  return _n
}

function sum(){
  if (_sum == ""){
    for (i in a){
      _sum += a[i]
    }
  }
  return _sum
}

function mean(){
  if (_mean == ""){
    _mean = sum() / n()
  }
  return _mean
}

function min(){
  if (_min == ""){
    sort()
    _min = a[1]
  }
  return _min
}

function max(){
  if (_max == ""){
    sort()
    _max = a[_n]
  }
  return _max
}

function range(){
  if (_min == "") min()
  if (_max == "") max()
  _range = _max - _min
}

function median(){
  if (_median == ""){
    if (n() % 2) {
      _median = a[(n() + 1) / 2];
    } else {
      _median = (a[(n() / 2)] + a[(n() / 2) + 1]) / 2.0;
    }
  }
  return _median
}

function sumsq(){
  if (_sumsq == ""){
    for (i in a){
      _sumsq += (a[i] - mean()) ** 2;
    }
  }
  return _sumsq
}

function sd(){
  if (_sd == ""){
    _sd = sqrt(sumsq() / n())
  }
  return _sd
}

function cv(){
  if (_cv == ""){
    _cv = sd() / mean()
  }
  return _cv
}

function all(){
  n()
  min()
  max()
  range()
  sum()
  mean()
  median()
  sumsq()
  sd()
  cv()
}

function output(){
  print "n:", _n, "min:", _min, "max:", _max, "range:", _range, "sum:", _sum, "median:", _median, "mean:", _mean, "sumsq:", _sumsq, "sd:", _sd, "cv:", _cv
}

{
  a[NR] = $1
}
END{
  all()
  output()
}'
