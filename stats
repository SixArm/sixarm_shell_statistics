#!/bin/sh
set -euf

##
# Given a list of numbers, calculate many statistics.
#
# Examples:
#
#     $ echo "1 2 4" | stats
#     n 3 min 1 max 4 sum 7 range 3 median 2 mean 2.33333 ss 4.66667 sd 1.24722 cv 0.534523
#
# Options for stats functions:
#
#     --n, --count, --length, --size
#     --min, --minimum
#     --max, --maximum
#     --range, --spread
#     --sum, --total
#     --mean, --average
#     --median
#     --mode [#TODO]
#     --ss, --sum-of-squares
#     --sd, --standard-deviation
#     --cv, --coefficient-of-variance
#
# Options for input:
#
#     --input-fields    The input uses fields, one number per field. This produces one output per record.
#     --input-records   The input uses records, one number per record. This produces one output overall.
#     --input-sorted    Tell the script that the input is already sorted ascending. This optimizes `median`.
#
# Options for output:
#
#     --output-label     Label each output item, such as "sum 123". Default is unlabeled, such as "123".
#     --output-csv       Output comma-separated values. [#TODO Default is awk field separator]
#     --output-tsv       Output tab-separated values. [#TODO Default is awk field separator]
#
# Author: Joel Parker Henderson (joel@joelparkerhenderson.com)
# License: GPL
# Created: 2015-03-28
# Updated: 2015-09-27
# Version: 2.0.2
##

awk '

## Statistics Functions

# Number of items
function n() {
  return _n
}

# Min, a.k.a. minimum.
function min() {
  if (_min == "") {
    if (_sort_asap) sort()
    if (_sort_done) {
      _min = _a[1]
    } else {
      _min = min_via_scan(_a)
    }
  }
  return _min
}

function min_via_scan(a,  min,i) {
  min = a[1]
  for (i in a) {
    if (a[i] < min) {
      min = a[i]
    }
  }
  return min
}

# Max, a.k.a. maximum.
function max() {
  if (_max == "") {
    if (_sort_asap) sort()
    if (_sort_done) {
      _max = _a[_n]
    } else {
      _max = max_via_scan(_a)
    }
  }
  return _max
}

function max_via_scan(a,  max,i) {
  max = a[1]
  for (i in a) {
    if (a[i] > max) {
      max = a[i]
    }
  }
  return max
}

# Range, a.k.a. spread.
function range() {
  if (_range == "") {
    _range = max() - min()
  }
  return _range
}

# Sum, a.k.a. total.
function sum() {
  if (_sum == "") {
    for (i in _a) {
      _sum += _a[i]
    }
  }
  return _sum
}

# Mean, a.k.a. arithmetic mean, a.k.a average.
function mean() {
  if (_mean == "") {
    _mean = sum() / n()
  }
  return _mean
}

# Median
function median() {
  sort()
  if (_median == "") {
    if (n() % 2) {
      _median = _a[(n() + 1) / 2];
    } else {
      _median = (_a[(n() / 2)] + _a[(n() / 2) + 1]) / 2.0;
    }
  }
  return _median
}

# Sum of Squares, a.k.a. SS.
function sum_of_squares() {
  if (_sum_of_squares == "") {
    for (i in _a) {
      _sum_of_squares += (_a[i] - mean()) ^ 2;
    }
  }
  return _sum_of_squares
}

# Standard Deviation, a.k.a. SD.
function standard_deviation() {
  if (_standard_deviation == "") {
    _standard_deviation = sqrt(sum_of_squares() / n())
  }
  return _standard_deviation
}

# Coefficient of Variance, a.k.a. CV
function coefficient_of_variance() {
  if (_coefficient_of_variance == "") {
    _coefficient_of_variance = standard_deviation() / mean()
  }
  return _coefficient_of_variance
}

## Array Functions

function push(a,x,  i) {
  i = 1 + length(a)
  _a[i] = x
  return x
}

function pop(a,  x,i) {
  i = length(a) - 1
  if (!i || i == 0) {
   return ""
  } else {
    x = _a[i]
    delete _a[i]
    return x
  }
}

## Helper Functions

function abs(value) {
  return (value < 0 ? -value : value)
}

function sort() {
  if (_sort_done != 1) {
    #TODO research if `asort` is POSIX or if there are alternatives
    asort(_a)
    _sort_done = 1
  }
}

function reset() {
  split("",_a)
  _n = ""
  _min = ""
  _max = ""
  _range = ""
  _sum = ""
  _mean = ""
  _median = ""
  _sum_of_squares = ""
  _standard_deviation = ""
  _coefficient_of_variance = ""
  _sort_done = ""
}

## Word Functions

#TODO optimize, such as by creating a word lookup, or init functions, etc.
function word_to_setup(word) {
  if (word == "input-fields")
    _calculate_via = "fields"
  else if (word == "input-records")
    _calculate_via == "records"
  else if (word == "input-sorted")
    _sort_done = 1 #true
  else if (word == "output-label")
    _output_label = 1
  else if (word == "output-csv")
    _output_field_join = ","
  else if (word == "output-tsv")
    _output_field_join = "\t"
  else if (word == "median")
    _sort_asap = 1
  else
    return ""
}

#TODO optimize, such as by creating a word lookup.
function word_to_function(word) {
  if (word == "n" || word == "count" || word == "length" || word == "size")
    return (n())
  else if (word == "min" || word == "minimum")
    return min()
  else if (word == "max" || word == "maximum")
    return max()
  else if (word == "range" || word == "spread")
    return range()
  else if (word == "sum" || word == "total")
    return sum()
  else if (word == "median")
    return median()
  else if (word == "mean" || word == "average")
    return mean()
  else if (word == "ss" || word == "sum-of-squares")
    return sum_of_squares()
  else if (word == "sd" || word == "standard-deviation")
    return standard_deviation()
  else if (word == "cv" || word == "coefficient-of-variance")
    return coefficient_of_variance()
  else
    return ""
}

function word_to_s(word,  x,s) {
  s = ""
  x = word_to_function(word)
  if (x) {
    if (_output_label) {
      s = _output_field_prefix word _output_field_midfix x _output_field_suffix
    } else {
      s = "" x
    }
  }
  return s
}

function words_to_s(words,  i,s,s2) {
  s = ""
  for (i in words) {
    s = s word_to_s(word[i]) _output_field_join
  }
  #TODO better way to trim
  sub(/^ +/,"",s)
  sub(/[^0-9]+$/,"",s)
  return s
}

## Argv Functions

function parse_argv(  i,word) {
  split("", _words)
  for (i in ARGV) {
    #TODO optimize?
    if (ARGV[i] ~ /^--(input-fields|input-records|input-sorted|output-label|output-csv|output-tsv|n|count|length|size|min|minimum|max|maximum|range|spread|sum|total|median|mean|average|ss|sum-of-squares|sd|standard-deviation|cv|coefficient-of-variance)/) {
      word = ARGV[i]
      delete ARGV[i]
      sub(/^--/, "", word)
      push(_words, word)
      word_to_setup(word)
    }
  }
}

function save_argv() {
  for (i in ARGV) {
    argv[i] = ARGV[i]
  }
}

## Output Functions

function output() {
  print "n", n(), "min", min(), "max", max(), "range", range(), "sum", sum(), "median", median(), "mean", mean(), "ss", sum_of_squares(), "sd", standard_deviation(), "cv", coefficient_of_variance()
}

## Main

function init() {
  split("",a)
  _n = 0
  _output_field_prefix = ""
  _output_field_midfix = " "
  _output_field_suffix = ""
  _output_field_join = " "
  _sort_asap = 0 #false
  _sort_done = 0 #false
  _calculate_via = "all" # enum "all", "fields", "records"
}

BEGIN{
  init()
  save_argv()
  parse_argv()
}

{
  if (_calculate_via == "all") {
    split($0,tmp)
    for (i in tmp) {
      _n++
      _a[_n] = tmp[i]
    }
  }
  else if (_calculate_via == "fields") {
    reset()
    _n = NF
    split($0,_a)
    output()
  }
  else if (_calculate_via == "records") {
    _a[NR] = $1
  }
}

END{
  if (_calculate_via == "all") {
    output()
  }
  if (_calculate_via == "records") {
    _n = NR
    output()
  }
}' "$@"
