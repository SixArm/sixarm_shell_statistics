#!/bin/sh
set -euf

##
# Num: number utilties for mathematics and statistics.
#
# The goal is to provide number utilities for common needs,
# using common shell capabilities on common systems.
#
# Syntax:
#
#     num [ options ] [ file ... ]
#
# NUMS mathematics examples:
#
#     $ echo "1 2 4" | num count
#     3
#
#     $ echo "1 2 4" | num min max range sum
#     1 4 3 7
#
# NUM statistics examples:
#
#     $ echo "1 2 4" | num median mean
#     2 2.33333
#
#     $ echo "1 2 4" | num variance standard-deviation
#     1.55556 1.24722
#
# NUM filter examples: #TODO
#
#     $ echo "3 1 2" | num sort
#     1 2 3
#
#     $ echo "1 2 2 3 4 4" | num unique
#     1 2 3 4
#
# NUM knows to skip items that are not numbers: #TODO
#
#     $ echo "a 1 b 2 c 4" | num count
#     3
#
# NUM input optimization examples: #TODO
#
#     $ echo "1 2 3 4" | num input-is-ascending max
#     4
#
#     $ echo "1 2 3 4" | num input-is-linear mean
#     2.5
#
#     $ echo "1 2 3 4" | num input-is-sorted median
#     2.5
#
#     $ echo "1 2 3 4" | num input-is-unique mode
#     ?
#
# NUM input can use stdin or files:
#
#     $ echo "1 2 4" | num sum
#     7
#
#     $ echo "1 2 4" > text.txt
#     $ num sum test.txt
#     7
#
# NUM output examples:
#
#     $ echo "1 2 4" | num all output-csv
#     1,2,4
#
#     $ echo "1 2 4" | num all output-tsv
#     1\t2\t4
#
#
# ## Options
#
# Numbers Options:
#
#     all                         All the items.
#     first                       The first item.
#     last                        The last item.
#
#     n                           The number of items.
#     count                       "
#     length                      "
#     size                        "
#
#     minimum                     The minimum value.
#     min                         "
#
#     maximum                     The maximum value.
#     max                         "
#
#     range                       The range, which is maximum - minimum.
#     spread                      "
#
#     sum                         The sum.
#     total                       "
#
# Statisics:
#
#     mean                        The arithmetic mean a.ka. average.
#     average                     "
#
#     median                      The median.
#     med                         "
#
#     middle                      The middle value i.e. closest to the mean.
#     mid                         "
#
#     mode                        The first mode or NAN.
#     modes                       All modes or NAN.
#
#     variance                    The variance.
#     var                         "
#
#     sum-of-squares              The sum of squares (SS).
#     sum2                        "
#     ss                          "
#
#     standard-deviation          The standard deviation (SD).
#     stdev                       "
#     sd                          "
#
#     coefficient-of-variance     The coefficient of variance (CV).
#     covar                       "
#     cv                          "
#
# Counts:
#
# Filters:
#
#     unique                      Effect unique numbers.
#                                   Nickname of effect-unique.
#
#     effect-unique               Effect unique numbers.
#                                   Example: 1 2 2 3 => 1 2 3.
#
#     select-unique               Select unique numbers.
#                                   Example: 1 2 2 3 => 1 3.
#
#     reject-unique               Reject unique numbers.
#                                   Example: 1 2 2 3 => 2.
#
#     sort                        Sort ascending.
#                                   Nickname of sort-asc.
#
#     sort-asc                    Sort ascending.
#                                   Example: 3 1 2 => 1 2 3.
#
#     sort-desc                   Sort descending.
#                                   Example: 3 1 2 => 3 2 1.
#
# Input:
#
#     input-fields                The input uses fields, one number per field.
#                                   The script will produce one output per record.
#
#     input-records               The input aggregates all fields in all records.
#                                   The script will produce one output overall.
#
#     input-is-linear             The input is linear numbers, i.e. on a line.
#                                   Optimizes `sum`, `mean`, etc.
#
#     input-is-numbers            The input is all numbers, no text.
#                                   Optimizes parsing numbers.
#
#     input-is-sorted             The input is already sorted ascending.
#                                   Optimizes `median`, `min`, `max`, etc.
#
#     input-is-unique             The input is already unique.
#                                   Optimizes `unique`, `select-unique`, `reject-unique`, etc.
#
# Output:
#
#     output-label                Label each output item, such as "sum 123".
#                                   Default is unlabeled, such as "123".
#
#     output-csv                  Output comma-separated values.
#                                   [#TODO Default is awk field separator]
#
#     output-tsv                  Output tab-separated values.
#                                   [#TODO Default is awk field separator]
#
# Notation:
#
#   * Option flag dashes are optional; for example `sum-of-squares`
#     and `sumofsquares`.
#
#   * If a value is unknown, or not a number, then it will print as "?".
#
#
# ## Ideas for future upgrades
#
# Numbers functions: `transpose`, `reverse`, etc.
#
# Count functions: `count-positive`, `count-negative`, `count-zero`,
# `count-non-zero`, `count-even`, `count-odd`, etc.
#
# Mathematics functions: `absmin`, `absmax`, etc.
#
# List functions: `rand`, `collapse`, `countunique`, etc.
#
# Quantile functions:s `q0`, `q1`, `q2`, `q3, `q4`, `iqr`.
#
# Statistics functions such as `antimode`, `pstdev`, `sstdev`, `pvar`, `svar`,
# `mad`, `madraw`, `sskew`, `pskew`, `skurt`, `pkurt`, `jarque`, `dpo`.
#
# IO functions: `input-header`, `output-header`, `format`, `printf`,
# `zero-termination`, etc.
#
# Table functions: `group`, `filler`, etc.
#
# Typical Unix functions: `help`, `version`, etc.
#
# Other functions such as those in other math stats tools.
#
#
# ## Other Mathematics Statistics Tools
#
# GNU datamash:
# http://www.gnu.org/software/datamash/manual/datamash.html
#
# R language
#
# Python Panda
#
#
# ## Tracking
#
# Author: Joel Parker Henderson (joel@joelparkerhenderson.com)
# License: GPL, BSD, MIT
# Created: 2015-03-28
# Updated: 2015-10-02
# Version: 2.1.0
##

##
# Programmers Implementation Notes
#
# ## Introduction
#
# A simple function has an input that is a numbers array (`nums`), such as:
#
#     function sum(nums,  x, i) {
#         for (i in nums) x += nums[i]
#         return x
#     }
#
# A typical function also has an input for metadata (`nums_`), such as
# cached results and/or previously-known information about the numbers:
#
#     function sum(nums, nums_,   i) {
#         if (!("sums" in nums_))
#            for (i in nums) nums_["sum"] += nums[i]
#         return nums_["sum"]
#     }
#
# We can optimize by using results of other functions, such as:
#
#     function min(nums, nums_,  x, i) {
#          if (nums_["ascending"])
#              return first(nums)
#          else if (nums_["descending"])
#              return last(nums)
#          else {
#              x = nums[1]
#              for (i in nums) if (nums[i] < x) x = nums[i]
#              return x
#          }
#     }
#
# Example extra data that any function can use:
#
#   * `nums_["unique"]` boolean 0|1 if nums is unique numbers.
#   * `nums_["ascending"]` boolean 0|1 if nums is sorted ascending.
#   * `nums_["descending"]` boolean 0|1 if nums is sorted descending.
#
# Function conventions:
#
#   * Use the `awk` convention of two spaces to separate the function
#     declaration list of input variables from internal variables.
#
#   * Check if the array has a key that is the same name as the function.
#     If the key exists, then skip any calculation; simply return the value.
#     the value is a previously-calculated result a.k.a. a memo, a.k.a. a cache.
#
#   * Explicitly set all internal variables because this helps
#     catch bugs and prevent them, and tends to be easier to read.
#
#   * After the loop, we cache the result in the array by using the
#     opts array and a key that is the same name as the function.
#
#   * We return the cache value, rather than the temp loop variable,
#     because in our experience this helps prevent bugs.
#
# Coding conventions:
#
#   * Prefer term `nums` for a numbers array vs. `arr` for a generic array.
#     The term `nums` is a contract that the array is always all numbers.
#
#   * Prefer operatior whitespace vs. none. Example: use `a = b` not `a=b`.
#     This is atypical for awk, but typical for Go, Python, Ruby, etc.
#
#   * Prefer POSIX vs. gawk for coding. Example: use `x ** 2` not `x ^ 2`.
#     For significant divergences between POSIX and gawk, ideally this code
#     has a POSIX function and gawk function, and chooses the right one.
#
#   * Prefer clarity vs. small optimizations. Example: intermediate vars.
#     If a user has a need for speed or size, it is wiser to use R, Go, etc.
#     Big optimizations are always welcome and can be added here quickly.
#
#   * Local vars may be prefixed with "_". Example: "_foo" is local.
#     This is most useful when a var has the same name as a function.
#
# Rule out for now:
#
#   * Launch using `#/usr/bin/env awk` because we need the `-f` arg.
#   * Launch using `#/usr/bin/env -S ..` because we want POSIX.
#
# To do:
#
#   * Upgrade to calc by column (a.k.a. field) or row (a.k.a. record).
#   * Create packages for apt, yum, brew, etc.
#   * Improve documentation, especially for novices.
#   * Improve tests, especially for corner cases.
#   * Improve POSIX compatibility, e.g. `length` function.
#   * Improve functionality, e.g. add boolean checks, number ranges.
##

awk '

############################################################################
#
# STATISTICS
#
##

# All items, i.e. echo.
#
function all(nums, nums_, opts) {
    return arr_join(nums, OFS)
}

# First item.
#
# Example:
#
#   1 2 4 => 1
#
function first(nums, nums_, opts) {
    if (!("first" in nums_)) {
        nums_["first"] = arr_first(nums)
    }
    return nums_["first"]
}

# Last item.
#
# Example:
#
#   1 2 4 => 4
#
function last(nums, nums_, opts) {
    if (!("last" in nums_)) {
        nums_["last"] = arr_last_via_arr_(nums, nums_)
    }
    return nums_["last"]
}

# Number of items, a.k.a. count, length.
#
# Example:
#
#     1 2 4 => 3
#
function n(nums, nums_) {
    if (!("n" in nums_)) {
        nums_["n"] = len(nums)
    }
    return nums_["n"]
}

# Minimum value.
#
# Example:
#
#     1 2 4 => 1
#
function min(nums, nums_,  _min, i) {
    if (!("min" in nums_)) {
        if (nums_["ascending"])
            nums_["min"] = first(nums)
        else if (nums_["descending"])
            nums_["min"] = last_via_nums_(nums)
        else
            nums_["min"] = arr_min_via_scan(nums)
    }
    return nums_["min"]
}

# Maximum value.
#
# Example:
#
#     1 2 4 => 4
#
function max(nums, nums_,  _max, i) {
    if (nums_["ascending"])
        nums_["max"] = last_via_nums_(nums, nums_)
    else if (nums_["descending"])
        nums_["max"] = first(nums)
    else
        nums_["max"] = arr_max_via_scan(nums)
    return nums_["max"]
}

# Range, a.k.a. spread.
#
# Example:
#
#     1 2 4 => 3
#
function range(nums, nums_) {
    if (!("range" in nums_)) {
        nums_["range"] = max(nums, nums_) - min(nums, nums_)
    }
    return nums_["range"]
}

# Sum, a.k.a. total.
#
# Example:
#
#     1 2 4 => 7
#
function sum(nums, nums_, _sum, i) {
    if (!("sum" in nums_)) {
        _sum = 0
        for (i in nums) {
            _sum += nums[i]
        }
        nums_["sum"] = _sum
    }
    return nums_["sum"]
}

# Mean, a.k.a. arithmetic mean, average.
#
# Example:
#
#     1 2 4 => 2.33333
#
function mean(nums, nums_) {
    if (!("mean" in nums_)) {
        if (nums_["linear"]){
          nums_["mean"] = (max(nums, nums_) - min(nums, nums_)) / n(nums, nums_)
        } else {
          nums_["mean"] = sum(nums, nums_) / n(nums, nums_)
        }
    }
    return nums_["mean"]
}

# Median.
#
# Example:
#
#     1 2 4 => 2
#     1 2 4 99 => 3
#
function median(nums, nums_,  _n) {
    if (!("median" in nums_)) {
        arr_sort_in_place(nums, nums_)
        _n = n(nums, nums_)
        if (_n % 2) {
            nums_["median"] = nums[(_n + 1) / 2]
        } else {
            nums_["median"] = nums[(_n / 2)] + (nums[(_n / 2) + 1] / 2.0)
        }
    }
    return nums_["median"]
}

# Mode: get the first mode; if there is none, return NAN.
#
# Examples:
#
#     1 2 2 3 => 2
#     1 2 2 3 3 => 2
#     1 2 3 => "?"
#
function mode(nums, nums_,  _modes) {
    if (!("mode" in nums_)) {
        if (_nums["unique"]) {
            nums_["mode"] = NAN
        } else {
            modes(nums, nums_, _modes)
            if (arr_empty(_modes)) {
                nums_["mode"] = NAN
            } else {
               nums_["mode"] = _modes[1]
            }
        }
    }
    return nums_["mode"]
}

# Modes.
#
# The modes are:
#
#   * The values that appear most often in a set of data.
#   * If values appear the same number of times, there are multiple modes.
#   * If each value occurs only once, then there are no modes.
#
# Examples:
#
#     1 2 2 3 => 2
#     1 2 2 3 3 => 2 3
#     1 2 3 => NAN
#
function modes(nums, nums_, dest,  _dest_i, _seen, _max, i, j, s) {
    if (!("modes" in nums_)) {
        if (_nums["unique"]) {
            nums_["modes"] = NAN
        } else {
            split("", dest)
            _dest_i = 0
            for (i in nums) _seen[nums[i]]++
            _max = arr_max_via_scan(_seen)
            if (_max > 1) {
                for (i in _seen) {
                    if (_seen[i] == _max) {
                       dest[++dest_i] = i
                    }
                }
                nums_["modes"] = arr_join(dest, OFS)
            } else {
               nums_["modes"] = NAN
            }
        }
    }
    return nums_["modes"]
}

# Middle, i.e. the value closest to the mean.
#
# Example:
#
#     1 2 4 => 2
#
function middle(nums, nums_,  _middle, _diff, i) {
    if (!("middle" in nums_)) {
        nums_["middle"] = arr_closest_via_arr_(nums, nums_, mean(nums, nums_))
    }
    return nums_["middle"]
}

# Sum of Squares, a.k.a. SS.
#
# Example:
#
#     1 2 4 => 4.66667
#
function sum_of_squares(nums, nums_,  _sum, _mean, i) {
    if (!("sum_of_squares" in nums_)) {
        _sum = 0
        _mean = mean(nums, nums_)
        for (i in nums) {
            _sum += (nums[i] - _mean) ** 2
        }
        nums_["sum_of_squares"] = _sum
    }
    return nums_["sum_of_squares"]
}

# Variance
#
# Example:
#
#     1 2 4 => 1.55556
#
function variance(nums, nums_,  _n, _mean, _diff, i) {
    if (!("variance" in nums_)) {
        _n = n(nums, nums_)
        _mean = mean(nums, nums_)
        for (i in nums){
            _diff += (nums[i] - _mean) ** 2
        }
        nums_["variance"] = _diff / _n
    }
    return nums_["variance"]
}

# Standard Deviation, a.k.a. SD.
#
# Example:
#
#     1 2 4 => 1.24722
#
function standard_deviation(nums, nums_) {
    if (!("standard_deviation" in nums_)) {
        nums_["standard_deviation"] = sqrt(variance(nums, nums_))
    }
    return nums_["standard_deviation"]
}

# Coefficient of Variance, a.k.a. CV.
#
# Example:
#
#     1 2 4 => 0.534522
#
function coefficient_of_variance(nums, nums_) {
    if (!("coefficient_of_variance" in nums_)) {
        nums_["coefficient_of_variance"] = standard_deviation(nums, nums_) / mean(nums, nums_)
    }
    return nums_["coefficient_of_variance"]
}

############################################################################
#
# BOOLEAN FUNCTIONS
#
##

function is_ascending(nums, nums_,   f, x, i) {
    if (!("ascending" in nums_)) {
        if ("descending" in nums) {
            nums_["ascending"] = ! nums_["descending"]
        } else {
            x = first(nums, nums_)
            nums_["ascending"] = TRUE
            for (i in nums) {
                if (nums[i] < x) {
                    nums_["ascending"] = FALSE
                    break
                }
            }
        }
    }
    return nums_["ascending"]
}

function is_descending(nums, nums_,   x, i) {
    if (!("descending" in nums_)) {
        if ("ascending" in nums) {
            nums_["descending"] = ! nums_["ascending"]
        } else {
            x = first(nums, nums_)
            nums_["descending"] = TRUE
            for (i in nums) {
                if (nums[i] > x) {
                    nums_["descending"] = FALSE
                    break
                }
            }
        }
    }
    return nums_["descending"]
}

############################################################################
#
# ARRAY FUNCTIONS
#
##

# Dump an array, suitable for debugging.
#
# Example:
#
#     arr_dump(arr)
#     +++
#     1 a
#     2 b
#     3 d
#     ---
#
function arr_dump(arr) {
    print "+++"
    for (k in arr) {
        print k, arr[k]
    }
    print "---"
}

# Is an array empty?
#
# Example:
#
#   split("", arr)
#   arr_empty(arr) => TRUE
#
# This is POSIX compatible.
#
function arr_empty(arr,  i) {
    for (i in arr) return 0
    return 1
}

# Join an array to a string, with a separator string.
#
# Example:
#
#     arr_join(1 2 4, ",") => "1,2,4"
#
function arr_join(arr, sep,  s, i) {
    s = ""
    for (i in arr) {
      s = s arr[i] sep
    }
   return substr(s, 1, length(s) - length(sep))
}

# Join an array to a string, with a separator string, prefix, and suffix.
#
# Example:
#
#     arr_join(1 2 4, ",", "<", ">") => "<1>,<2>,<4>"
#
function arr_join_with_prefix_suffix(arr, sep, prefix, suffix,  s, i) {
    s = ""
    for (i in arr) s = s prefix arr[i] suffix sep
    return substr(s, 1, length(s) - length(sep))
}

# Length of an array.
#
# Example:
#
#     arr_length(1 2 4) => 3
#
# TODO: Optimize - consider using `gawk` and its `length` function.
#
function arr_length(arr,  i, k) {
    for (i in arr) k++
    return k
}

# Return the first item in an array.
#
# Example:
#
#     arr_first(1 2 4) => 1
#
function arr_first(arr) {
    return arr[1]
}

# Get the last item in an array, by using the `length` function.
#
# Example:
#
#     arr_last_via_length(1 2 4) => 4
#
function arr_last_via_length(arr) {
    return arr[length(arr)]
}

# Get the last item in an array, by using the `arr_["n"]` value.
#
# Example:
#
#     arr_last_via_arr_(1 2 4, arr_) => 4
#
function arr_last_via_arr_(arr, arr_) {
    return arr[arr_["n"]]
}

# Get the minimum value, by doing a scan of the entire array.
#
# Example:
#
#     arr_min_via_scan(1 2 4) => 4
#
function arr_min_via_scan(arr,  _min) {
    _min = arr[1]
    for (i in arr) if (arr[i] < _min) _min = arr[i]
    return _min
}

# Get the maxmimum value, by doing a scan of the entire array.
#
# Example:
#
#     arr_max_via_scan(1 2 4) => 4
#
function arr_max_via_scan(arr,  _max) {
    _max = arr[1]
    for (i in arr) if (arr[i] > _max) _max = arr[i]
    return _max
}

# Get the closest item value to a target value in an array.
#
# Example:
#
#    arr = 1 2 4
#    target = 2.5
#    arr_closest(arr, arr_, target) => 2
#
# If multiple values are equidistant to the target,
# then return the earliest value.
#
function arr_closest_via_arr_(arr, arr_, target, _closest_value, _closest_delta, _delta, x, i) {
    #TODO optimize when the array is already sorted,
    # by using quicksort or similar divide-and-conquer.
    _closest_value = first(arr)
    _closest_delta = abs(_closest_delta - target)
    for (i in arr) {
        _delta = abs(arr[i] - target)
        if (_delta < _closest_delta) {
            _closest_value = arr[i]
            _closest_delta = _delta
        }
    }
    return _closest_value
}

# Push one item on an array stack, by using the `length` function.
#
# Example:
#
#     arr = 1 2
#     arr_push_via_length(arr, 4)
#     => arr == 1 2 4
#
function arr_push_via_length(arr, item) {
    arr[length(arr)+1] = item
}

# Push one item on an array stack, by using the `arr_["n"]` value.
#
#    arr = 1 2
#    arr_["n"] = 2
#    arr_push_via_arr_(arr, arr_, 4)
#    => arr == 1 2 4
#
function arr_push_via_arr_(arr, arr_, item) {
    arr[++arr_["n"]] = item
}

# Push multiple items on the array stack, by using the `length` function.
#
# Example:
#
#     arr1 = 1 2
#     arr2 = 4 8
#     arr_pushes_via_length(arr1, arr2)
#     => arr == 1 2 4 8
#
function arr_pushes_via_length(arr, items, _n, _i) {
    _n = length(arr)
    for (_i in items) {
        arr[++_n] = items[_i]
    }
}

# Push multiple items on the array stack, by using the `arr_["n"]` value.
#
#    arr1 = 1 2
#    arr2 = 4 8
#    arr_["n"] = 2
#    arr_pushes_via_arr_(arr, arr_, b)
#    => arr == 1 2 4 8
#
function arr_pushes_via_arr_(arr, arr_, items, _n, _i) {
    _n = arr_["n"]
    for (_i in items) {
        arr[++_n] = items[_i]
    }
    arr_["n"] += _n
}

# Push multiple numbers on the array stack, by using the `arr_["n"]` value.
#
#    arr = 1 2
#    b = 4 8
#    arr_pushes_via_arr_(arr, arr_, b)
#    => arr == 1 2 4 8
#
function arr_pushes_numbers_via_arr_(arr, arr_, items, _n, _i) {
    _n = arr_["n"]
    for (_i in items) {
        arr[++_n] = items[_i]
    }
    arr_["n"] += _n
}

# Pop one item of the array stack, by using the `length` function.
#
# Example:
#
#     arr = 1 2 4
#     arr_pop_via_length(a)
#     => 4
#     => arr == 1 2
#
# If the array is empty, return "".
#
function arr_pop_via_length(arr, _x, _n) {
    _n = length(arr)
    if (_n) {
        _x = arr[_n]
        delete arr[_n]
        return x
    } else {
        return ""
    }
}

# Pop one item of the array stack, by using the `arr_["n"]` value.
#
# Example:
#
#     arr = 1 2 4
#     arr_pop_via_arr_(arr, arr_)
#     => 4
#     => arr == 1 2
#
# If the array is empty, return "".
#
function arr_pop_via_arr_(arr, arr_, _x) {
    _n = arr_["n"]
    if (_n) {
        x = arr[_n]
        delete arr[_n]
        arr_["n"]--
        return x
    } else {
        return ""
    }
}

# Sort an array in place.
#
# Example:
#
#     arr = 3 1 2
#     arr_sort_in_place(arr, arr_)
#     => arr == 1 2 3
#
# Arr_:
#
#    * `arr_["sorted"]` means the array is already sorted.
#
# Caution: This implementation requires the `asort` function,
# which we believe is available in current `gawk` implementations,
# but may not be POSIX-compliant.
#
# TODO: Research if `asort` is POSIX or if there are alternatives.
#
function arr_sort_in_place(arr, arr_) {
    if (arr_["sorted"] != TRUE) {
        asort(arr)
        arr_["sorted"] = TRUE
    }
}

# Select numbers, by doing in-place destructive logic.
#
# Example:
#
#     arr = foo 1 goo 2
#     arr_select_numbers_in_place(arr, arr_)
#     => arr == 1 2
#
# Arr_:
#
#   * `arr_["unique"]` means the array is already unique,
#     which means the function will be skipped.
#
# TODO: Optimize.
#
function arr_select_numbers_in_place(arr, arr_, _length, i, j) {
    if (arr_["input_is_numbers"] != TRUE) {
        for (i in arr) {
            if (arr[i] == arr[i] + 0) {
                j++
                if (i != j) {
                   arr[j] = arr[i]
                }
            }
        }
        _length = length(arr)
        for (i = j + 1; i <= _length; i++) delete arr[i]
        arr_["n"] = j  #TODO clear cache of results
        arr_["input_is_numbers"] = TRUE
    }
}

# Effect unique items, by doing in-place destructive logic.
#
# Example:
#
#     arr = 1 2 2 3
#     arr_effect_unique_in_place(arr, arr_)
#     => arr == 1 2 3
#
# Arr_:
#
#   * `arr_["unique"]` means the array is already unique,
#     which means the function will be skipped.
#
# TODO: Optimize.
#
function arr_effect_unique_in_place(arr, arr_, _dest, _seen, i) {
    info("effect_unique_in_place")
    if (arr_["unique"] != TRUE) {
        for (i in arr) _seen[arr[i]] == TRUE
        for (i in _seen) _dest[++j] = i
        arr = _dest
        arr_["unique"] = TRUE
    }
}

# Select unique items, by doing in-place destructive logic.
#
# Example:
#
#     arr = 1 2 2 3
#     arr_select_unique_in_place(arr, arr_)
#     => arr == 1 3
#
# Arr_:
#
#   * `arr_["unique"]` means the array is already unique,
#     which means the function will be skipped.
#
# TODO: Optimize.
#
function arr_select_unique_in_place(arr, arr_, _dest, _seen, i) {
    info("select_unique_in_place")
    if (arr_["unique"] != TRUE) {
        for (i in arr) _seen[arr[i]]++
        for (i in _seen) if (_seen[i] == 1) dest[++j] = i
        arr = _dest
        arr_["unique"] = TRUE
    }
}

# Reject unique items, by doing in-place destructive logic.
#
# Example:
#
#     arr = 1 2 2 3
#     arr_reject_unique_in_place(arr, arr_)
#     => arr == 2
#
# Arr_:
#
#   * `arr_["unique"]` means the array is already unique,
#      which means this function will reject all the numbers.
#
# TODO: Memoize.
#
function arr_reject_unique_in_place(arr, arr_, _dest, _seen, i) {
    info("reject_unique_in_place")
    if (arr_["unique"] == TRUE) {
        split("", arr)
    } else {
        for (i in arr) _seen[arr[i]]++
        for (i in _seen) if (_seen[i] != 1) _dest[++j] = i
        arr = _dest
    }
}

############################################################################
#
# MATH FUNCTIONS
#
##

# Absolute value.
#
# Examples:
#
#    abs(1) => 1
#    abs(-1) => 1
#
function abs(value) {
    if (value >= 0) { return value } else { return -value }
}

############################################################################
#
# TRIG FUNCTIONS #TODO
#
##

# These trig functions are thanks to:
# http://www2.keck.hawaii.edu/inst/deimos/procs/calc
#
#    abs(x)  = absolute value of x
#    nint(x)   = nearest integer
#    log10(x)  = common logarithm of x
#
#    sind(x)  = sine of x (x in degrees)
#    cosd(x)  = cosine of x (x in degrees)
#
#    asin(x)   = inverse sine of x (result in radians)
#    acos(x)   = inverse cosine of x (result in radians)
#    atan(x)   = inverse tangent of x (result in radians)
#    asind(x)  = inverse sine of x (result in degrees)
#    acosd(x)  = inverse cosine of x (result in degrees)
#    atan2d(x,y) = inverse tangent of x,y (result in degrees)

function cosd(x, pi){ pi=atan2(0,-1) ; return cos(x*pi/180.) }
function sind(x, pi){ pi=atan2(0,-1) ; return sin(x*pi/180.) }
function log10(x){ return log(x)/log(10) }
function asin(x){ return atan2(x,(1.-x^2)^0.5) }
function acos(x){ return atan2((1.-x^2)^0.5,x) }
function atan(x){ return atan2(x,1) }
function asind(x, pi,rad){ pi=atan2(0,-1) ; rad=atan2(x,(1.-x^2)^0.5) ; return rad*180./pi }
function acosd(x, pi,rad){ pi=atan2(0,-1) ; rad=atan2((1.-x^2)^0.5,x) ; return rad*180./pi }
function atan2d(x,y, pi,rad){ pi=atan2(0,-1) ; rad=atan2(x,y) ; return rad*180./pi }

############################################################################
#
# DEBUG FUNCTIONS
#
##

## Debugging Functions

function info(msg) {
    print msg
}

function error(msg) {
    print msg | "cat 1>&2"  # POSIX compatible
}

## Helper functions

# Ready the global numbers array and options array.
#
# This clears the arrays, then sets the numbers count to 0.
#
function ready() {
  init_nums()
}

############################################################################
#
# WORD FUNCTIONS
#
##

# Call this function for each option word a.k.a. flag,
# before any calculation happens and any work happens.
#
# This function must only set `conf` keys and values.
# This function must NOT do any calculations, work, etc.
#
# Example:
#
#     word_to_conf("median")
#     => conf["sort"] = "?" (which means a sort is needed)
#
# TODO optimize, such as by creating a word lookup, or init functions, etc.
#
function word_to_conf(word, conf) {
    if (word == "input-fields")
        conf["input_scope"] = CONF_INPUT_SCOPE_FIELDS
    else if (word == "input-records")
        cont["input_scope"] = CONF_INPUT_SCOPE_RECORDS
    else if (word == "input-is-linear")
        conf["sorted"] = TRUE
    else if (word == "input-is-sorted")
        conf["sorted"] = TRUE
    else if (word == "input-is-unique")
        conf["unique"] = TRUE
    else if (word == "output-label")
        conf["output_label"] = TRUE
    else if (word == "output-csv")
        conf["output_field_separator"] = ","
    else if (word == "output-tsv")
        conf["output_field_separator"] = "\t"
    else if (word == "median")
        conf["sort"] = "?"
    else if (word == "unique")
        conf["unique"] = "?"
    else
        return ""
}

# Copy relevant conf items to the number list items.
#
function conf_to_nums_() {
    nums_["sorted"] = conf["sorted"]
    nums_["unique"] = conf["unique"]
    nums_["sort"] = conf["sort"]
    nums_["unique"] = conf["unique"]
}

# Call this function for each option word a.k.a. flag,
# when it is time do calculations, work, etc.
#
# Example:
#
#     nums = 1 2 4
#     nums_ = []
#     word_to_function(nums, nums_, "sum")
#     => 7 (by calling the `sum` function)
#
# Note: this implementation uses if..else instead of
# any switch or case, because we want POSIX usability.
#
# TODO: Is there a way to shorten this function,
# perhaps by reflection on the word and function name?
#
function word_to_function(nums, nums_, word) {
    if (word == "all")
        return (all(nums, nums_))
    else if (word == "first")
        return (first(nums, nums_))
    else if (word == "last")
        return (last(nums, nums_))
    else if (word == "n")
        return (n(nums, nums_))
    else if (word == "min")
        return min(nums, nums_)
    else if (word == "max")
        return max(nums, nums_)
    else if (word == "range")
        return range(nums, nums_)
    else if (word == "sum")
         return sum(nums, nums_)
    else if (word == "median")
        return median(nums, nums_)
    else if (word == "mean")
        return mean(nums, nums_)
    else if (word == "middle")
        return middle(nums, nums_)
    else if (word == "mode")
        return mode(nums, nums_)
    else if (word == "modes")
        return modes(nums, nums_)
    else if (word == "sum-of-squares")
        return sum_of_squares(nums, nums_)
    else if (word == "variance")
        return variance(nums, nums_)
    else if (word == "standard-deviation")
        return standard_deviation(nums, nums_)
    else if (word == "coefficient-of-variance")
        return coefficient_of_variance(nums, nums_)
    else
        return ""
}

# Given a word, return the result as a string.
#
# Example:
#
#     nums = 1 2 4
#     nums_ = []
#     word_to_s(nums, opts, "sum")
#     => "7"
#
# The string has various settings:
#
#   * `opts["output_field_prefix"]` is at the start of the string.
#   * `opts["output_field_suffix"]` is at the end of the string.
#   * `opts["output_field_infix"]` is between the label and value.
#
# Example:
#
#     opts["output_label"] = TRUE
#     opts["output_field_prefix"] = "<"
#     opts["output_field_suffix"] = ">"
#     opts["output_field_infix"]  = ":"
#     nums = 1 2 4
#     opts = []
#     word_to_s(nums, opts, "sum")
#     => "<sum:7>"
#
function word_to_s(nums, opts, word,  x, s) {
    x = word_to_function(nums, opts, word)
    if (_output_label) {
        s = "" opts["output_field_prefix"] word opts["output_field_infix"] x opts["output_field_suffix"]
    } else {
        s = "" x
    }
    return s
}

function words_to_s(nums, opts, words,  word, i, s, s2) {
    s = ""
    sep = opts["output_field_separator"]
    for (i in words) {
        word = words[i]
        if (__words_output[word]) {
            x = word_to_s(nums, opts, word)
            s = s x sep
        }
    }
    s = substr(s, 1, length(s) - length(sep))
    return s
}

## Filtering

function filters(nums, opts) {
    if ("select-numbers") arr_select_numbers_in_place(nums, opts)
    if ("select-unique" in opts) select_unique_in_place(nums, opts)
    if ("reject-unique" in opts) reject_unique_in_place(nums, opts)
    if ("sort-asc" in opts) arr_sort_in_place(nums, opts)
    if ("sort-desc" in opts) print "#TODO"
    #print "filters stop"; arr_dump(a)
}

## Argv Functions

function parse_argv(  i, word) {
    for (i in ARGV) {
        #info("parse_argv ARGV[" i "]:" ARGV[i])
        if (ARGV[i] in __words_list) {
            word = ARGV[i]
            delete ARGV[i]
            word = normalize_word(word)
            #info("parse_argv found word:" word)
            arr_push_via_length(__words, word)
            word_to_conf(word, __conf)
        }
    }
}

function normalize_word(word) {
    #info("normalize_word word:" word)
    if (word in __words_list) {
        return __words_list[word]
    } else {
        return word
    }
}

function save_argv() {
    for (i in ARGV) {
        argv[i] = ARGV[i]
    }
}

## Output Functions

function output() {
    __nums_["n"] = __nums_n
    filters(__nums, __opts)
    print words_to_s(__nums, __opts, __words)
}

############################################################################
#
# INITIALIZE
#
##

# Initialize everything.
#
# This calls various `init_*` functions.
#
function init() {
    init_constants()
    init_conf()
    init_words()
    init_words_list()
    init_words_output()
}

# Initialize constants that we use, essentially like defines.
#
function init_constants() {
    FALSE = 0
    TRUE = 1
    NAN = "NAN"
    CONF_INPUT_SCOPE_FIELDS = 1
    CONF_INPUT_SCOPE_RECORDS = 2
    PI = atan2(0,-1)
}

# Initialize the global configuration lookup.
#
# This is how the script stores its own settings.
#
function init_conf() {
    split("", __conf)
    __conf["input_scope"] = CONF_INPUT_SCOPE_RECORDS
    __conf["output_exists"] = FALSE
    __conf["output_record_separator"] = ORS
    __conf["output_field_separator"] = OFS
    __conf["output_field_prefix"] = ""
    __conf["output_field_suffix"] = ""
    __conf["output_field_infix"] = ":"
}

# Initialize the words list.
#
# The words are the args that this script cares about.
# We keep them in order, so we can output results in order.
#
function init_words() {
    split("", __words)
}

# Initialize the `__words_list` lookup array.
#
# This is useful to normalize words from whatever a user types
# on the command line to whatever we expect as canonical.
#
# The first entry on a line is always the canonical entry.
#
function init_words_list() {
    __words_list["all"] = "all"
    __words_list["n"] = __words_list["count"] = __words_list["length"] = __words_list["size"] = "n"
    __words_list["first"] = "first"
    __words_list["last"] = "last"
    __words_list["min"] = __words_list["minimum"] = "min"
    __words_list["max"] = __words_list["maximum"] = "max"
    __words_list["range"] = __words_list["spread"] = "range"
    __words_list["sum"] = __words_list["total"] = "sum"
    __words_list["median"] = __words_list["med"] = "median"
    __words_list["mean"] = __words_list["average"] = __words_list["avg"] = "mean"
    __words_list["mode"] = "mode"
    __words_list["modes"] = "modes"
    __words_list["middle"] = __words_list["mid"] = "middle"
    __words_list["sum-of-squares"] = __words_list["sumofsquares"] = __words_list["sum-squares"] = __words_list["sumsquares"] = __words_list["sum2"] = __words_list["ss"] = "sum-of-squares"
    __words_list["variance"] = __words_list["var"] = "variance"
    __words_list["standard-deviation"] = __words_list["standarddeviation"] =  __words_list["stdev"] = __words_list["sd"] = "standard-deviation"
    __words_list["coefficient-of-variance"] = __words_list["coefficientofvariance"] = __words_list["coefficient-variance"] = __words_list["coefficientvariance"] = __words_list["co-var"] = __words_list["covar"] = __words_list["cv"] = "coefficient-of-variance"
    __words_list["effect-unique"] = __words_list["effectunique"] = _words_list["unique"] = "effect-unique"
    __words_list["select-unique"] = __words_list["selectunique"] = "select-unique"
    __words_list["reject-unique"] = __words_list["rejectunique"] = "reject-unique"
    __words_list["sort-ascending"] = __words_list["sortascending"] = __words_list["sort-asc"] = __words_list["sortasc"] = __words_list["sort"] = "sort-ascending"
    __words_list["sort-descending"] = __words_list["sortdescending"] = __words_list["sort-desc"] = __words_list["sortdesc"] = "sort-descending"
    __words_list["input-fields"] = __words_list["inputfields"] = "input-fields"
    __words_list["input-records"] = __words_list["inputrecords"] = "input-records"
    __words_list["input-is-linear"] = __words_list["inputislinear"] = __words_list["input-linear"] = __words_list["inputlinear"] = "input-is-linear"
    __words_list["input-is-sorted"] = __words_list["inputissorted"] = __words_list["input-sorted"] = __words_list["inputsorted"] = "input-is-sorted"
    __words_list["input-is-unique"] = __words_list["inputisunique"] = __words_list["input-unique"] = __words_list["inputunique"] = "input-is-unique"
    __words_list["output-label"] = __words_list["outputlabel"] = "output-label"

}

# Initialize the `__words_output` lookup array.
#
# If a word has any output, such as a statistics function,
# then set the word output to TRUE so we know to build a string.
#
function init_words_output() {
    __words_output["all"] = TRUE
    __words_output["first"] = TRUE
    __words_output["last"] = TRUE
    __words_output["n"] = TRUE
    __words_output["min"] = TRUE
    __words_output["max"] = TRUE
    __words_output["range"] = TRUE
    __words_output["sum"] = TRUE
    __words_output["median"] = TRUE
    __words_output["mean"] = TRUE
    __words_output["middle"] = TRUE
    __words_output["mode"] = TRUE
    __words_output["modes"] = TRUE
    __words_output["sum-of-squares"] = TRUE
    __words_output["variance"] = TRUE
    __words_output["standard-deviation"] = TRUE
    __words_output["coefficient-of-variance"] = TRUE
}

# Initialize the global numbers array and its metadata.
function init_nums() {
    split("", __nums)
    split("", __nums_)
    __nums_n = 0
}

############################################################################
#
# MAIN
#
##

BEGIN{
    init()
    save_argv()
    parse_argv()
    ready()
}

{
    if (__conf["input_scope"] == CONF_INPUT_SCOPE_RECORDS) {
        split($0, arr)
        for(i in arr) if (arr[i] == arr[i] + 0) __nums[++__nums_n] = arr[i]
    }
    else if (__conf["input_scope"] == CONF_INPUT_SCOPE_FIELDS) {
        ready()
        split($0, arr)
        for(i in arr) if (arr[i] == arr[i] + 0) __nums[++__nums_n] = arr[i]
        output()
    }
}

END{
    if (__conf["input_scope"] == CONF_INPUT_SCOPE_RECORDS) {
        output()
    }
}' "$@"
